# Default values for service-deploy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

labels:
  project: project
  org: org

image:
  repository: xxx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

env: []

#imagePullSecrets: 
#  - name: "xxx" # docker私服

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
  # linkerd.io/inject: enabled #启用 linkerd


podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort #NodePort、ClusterIP
  port:               #默认8080
  nodePort:           #http的 nodePort
  rpc_port:           #grpc端口,默认8082
  rpc_nodePort:       #grpc的 nodePort
  manage_port:        #管理端口,默认8081
  manage_nodePort:    #管理端口的 nodePort

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 90
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}  #亲和策略
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #     - weight: 100
  #       podAffinityTerm:
  #         labelSelector:
  #           matchLabels:
  #             app: ocean
  #         topologyKey: kubernetes.io/hostname

livenessProbe: {} #存活校验，判断容器是否存活
  # httpGet:
  #   scheme: HTTP
  #   path: /xxx
  #   port: 8080
  # initialDelaySeconds: 40 #初始化等待时间，这里等待40秒才启动校验, 按资源限制动态调整
  # timeoutSeconds: 5   #超时时间
  # periodSeconds: 10   #间隔10秒校验一次
  # successThreshold: 1  #1次成功则视为校验成功
  # failureThreshold: 3  #3才失败视为校验失败
readinessProbe: {} #就绪校验，判断容器就绪后才会接入流量
  # httpGet:
  #   scheme: HTTP
  #   path: /xxx
  #   port: 8080
  # initialDelaySeconds: 40
  # timeoutSeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # failureThreshold: 3
startupProbe: {} #启动校验，判断容器是否启动成功
  # httpGet:
  #   scheme: HTTP
  #   path: /xxx
  #   port: 8080
  # initialDelaySeconds: 40
  # timeoutSeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # failureThreshold: 3

strategy: #滚动更新策略
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25% #以25%滚动更新
    maxSurge: 25%
